generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String     @id @default(cuid())
  name      String
  incidents Incident[]
  services  Service[]
  users     User[]
}

model User {
  id             String       @id @default(cuid())
  email          String       @unique
  clerkId        String       @unique
  firstName      String?
  lastName       String?
  fullName       String?
  avatar         String?
  role           UserRole     @default(MEMBER)
  isActive       Boolean      @default(true)
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  lastLoginAt    DateTime?
  lastActivityAt DateTime?
  
  // User preferences and settings
  timezone       String?      @default("UTC")
  language       String?      @default("en")
  emailNotifications Boolean  @default(true)
  pushNotifications Boolean   @default(true)
  
  // User activity tracking
  totalIncidentsCreated Int   @default(0)
  totalUpdatesPosted    Int   @default(0)
  lastIncidentCreatedAt DateTime?
  
  // Profile completion
  profileCompleted Boolean    @default(false)
  
  organization   Organization @relation(fields: [organizationId], references: [id])
  notifications  Notification[]
}

model Service {
  id             String        @id @default(cuid())
  name           String
  status         ServiceStatus
  organizationId String
  incidents      Incident[]
  organization   Organization  @relation(fields: [organizationId], references: [id])
  notifications  Notification[]
}

model Incident {
  id             String           @id @default(cuid())
  title          String
  description    String?
  status         IncidentStatus
  serviceId      String
  createdAt      DateTime         @default(now())
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id])
  service        Service          @relation(fields: [serviceId], references: [id])
  updates        IncidentUpdate[]
  notifications  Notification[]
}

model IncidentUpdate {
  id         String   @id @default(cuid())
  content    String
  incidentId String
  createdAt  DateTime @default(now())
  incident   Incident @relation(fields: [incidentId], references: [id])
}

model Notification {
  id         String           @id @default(cuid())
  title      String
  message    String
  type       NotificationType
  isRead     Boolean          @default(false)
  userId     String?
  serviceId  String?
  incidentId String?
  createdAt  DateTime         @default(now())
  readAt     DateTime?
  
  user       User?            @relation(fields: [userId], references: [id])
  service    Service?         @relation(fields: [serviceId], references: [id])
  incident   Incident?        @relation(fields: [incidentId], references: [id])
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  MEMBER
  VIEWER
}

enum ServiceStatus {
  OPERATIONAL
  DEGRADED
  PARTIAL_OUTAGE
  MAJOR_OUTAGE
}

enum IncidentStatus {
  OPEN
  RESOLVED
  SCHEDULED_MAINTENANCE
}

enum NotificationType {
  INCIDENT_CREATED
  INCIDENT_UPDATED
  INCIDENT_RESOLVED
  SERVICE_DEGRADED
  SERVICE_DOWN
  SERVICE_RESTORED
  MAINTENANCE_SCHEDULED
  SYSTEM_ALERT
  USER_INVITED
  ROLE_CHANGED
} 